@using MyCardCollection.ViewModel
@using Newtonsoft.Json
@model DeckStatisticsViewModel

<style>
    p, h1, h2, h3, h4, h5 {
        color: black !important;
    } 
    .mtg-mana-white {
    width: 13px;
    height: 13px;
    margin-top: 4px;
    background-color: goldenrod; /* defines the background color of the image */
    mask: url(https://images.ctfassets.net/s5n2t79q9icq/7misDwf4mwnXghCh5vkGw6/0debf7ae3f13d0e706b5df8cbdbe2172/plain.svg) no-repeat center / contain;
    -webkit-mask: url(https://images.ctfassets.net/s5n2t79q9icq/7misDwf4mwnXghCh5vkGw6/0debf7ae3f13d0e706b5df8cbdbe2172/plain.svg) no-repeat center / contain;
    }
    .mtg-mana-black {
        width: 13px;
        height: 13px;
        margin-top: 4px;
        background-color: rebeccapurple; /* defines the background color of the image */
        mask: url(https://images.ctfassets.net/s5n2t79q9icq/45958FxkGokQAacUNVQ1Bh/a611cf3f197e9a8352fd2fe591097704/swamp.svg) no-repeat center / contain;
        -webkit-mask: url(https://images.ctfassets.net/s5n2t79q9icq/45958FxkGokQAacUNVQ1Bh/a611cf3f197e9a8352fd2fe591097704/swamp.svg) no-repeat center / contain;
    }
    .mtg-mana-red {
        width: 13px;
        height: 13px;
        margin-top: 4px;
        background-color: darkred; /* defines the background color of the image */
        mask: url(https://images.ctfassets.net/s5n2t79q9icq/192VSSLFeZSzAKZGOXrHCG/dec6be6eb6a80a40e156ecbf2cd385cf/mountain.svg) no-repeat center / contain;
        -webkit-mask: url(https://images.ctfassets.net/s5n2t79q9icq/192VSSLFeZSzAKZGOXrHCG/dec6be6eb6a80a40e156ecbf2cd385cf/mountain.svg) no-repeat center / contain;
    }
    .mtg-mana-green {
        width: 13px;
        height: 13px;
        margin-top: 4px;
        background-color: forestgreen; /* defines the background color of the image */
        mask: url(https://images.ctfassets.net/s5n2t79q9icq/1wrQKxhCNchqYyDOMG9mm3/26e51f7d9e0bc20874b004cd4b93568c/forest.svg) no-repeat center / contain;
        -webkit-mask: url(https://images.ctfassets.net/s5n2t79q9icq/1wrQKxhCNchqYyDOMG9mm3/26e51f7d9e0bc20874b004cd4b93568c/forest.svg) no-repeat center / contain;
    }
    .mtg-mana-blue {
        width: 13px;
        height: 13px;
        margin-top: 4px;
        background-color: royalblue; /* defines the background color of the image */
        mask: url(https://images.ctfassets.net/s5n2t79q9icq/4HiU35WSbQDiLxLGyGlipf/1c3f9bb830d2f6c4299c30b974d27fc3/water.svg) no-repeat center / contain;
        -webkit-mask: url(https://images.ctfassets.net/s5n2t79q9icq/4HiU35WSbQDiLxLGyGlipf/1c3f9bb830d2f6c4299c30b974d27fc3/water.svg) no-repeat center / contain;
    }
</style>

<div>
    <h1 > <b> @Model.DeckName</b></h1>
    <p > ID: @Model.DeckId</p>
    <p > Cards: @Model.Size</p>
    <p > Owner: @Model.OwnerId</p>

    @{
        IEnumerable<(int Quantity, CardData data)> DATA = Model.Cards;
        var PLANESWALKERS = DATA.Where(x=>x.data.Type.Contains("Planeswalker")).ToList();
        var CREATURES = DATA.Where(x=>x.data.Type.Contains("Creature")).ToList();
        var INSTANTS = DATA.Where(x=>x.data.Type.Contains("Instant")).ToList();
        var ENCHANTMENTS = DATA.Where(x=>x.data.Type.Contains("Enchantment")).ToList();
        var SORCERIES = DATA.Where(x=>x.data.Type.Contains("Sorcery")).ToList();
        var ARTIFACTS = DATA.Where(x=>x.data.Type.Contains("Artifact")).ToList();
        var LANDS = DATA.Where(x=>x.data.Type.Contains("Land")).ToList();
      
    }
    <div class="accordion w-75" style="display:block; margin-left:auto; margin-right:auto; max-height:fit-content;" id="accordion-1" data-children=".accordion-item">
       
        <!-- PLANESWALKER -->
        <div class="accordion-item" style="color: black;">
            <a  style="color:black;" data-toggle="collapse" data-parent="#accordion-1" href="#accordion-panel-planeswalker" aria-expanded="true" aria-controls="accordion-1">
                <i><img src="https://mtgmeta.io/assets/media/manasvg/planeswalker.svg" alt="planeswalker" title="planeswalker"> </i> 
                <div>Planeswalkers [<b>@PLANESWALKERS.Sum(x=>x.Quantity)x</b>]</div>
                <i class="h5 icon-chevron-small-right"></i>
            </a>
             <div id="accordion-panel-planeswalker" class="collapse" role="tabpanel">
                 <ul class="list-unstyled">
                     @foreach(var card in PLANESWALKERS)
                     {
                        <li class="text-small row">
                            <div class="col-2"> @card.Quantity </div>
                            <div> @card.data.Name </div>
                        </li>
                     }
                </ul>
             </div>
        </div>
        <!-- CREATURES -->
        <div class="accordion-item" style="color: black;">
            <a  style="color:black;" data-toggle="collapse" data-parent="#accordion-1" href="#accordion-panel-creature" aria-expanded="true" aria-controls="accordion-1">
                <i><img src="https://mtgmeta.io/assets/media/manasvg/creature.svg" alt="creature" title="creature"> </i> 
                <div>Creatures [<b>@CREATURES.Sum(x=>x.Quantity)x</b>]</div>
                <i class="h5 icon-chevron-small-right"></i>
            </a>
             <div id="accordion-panel-creature" class="collapse" role="tabpanel">
                 <ul class="list-unstyled">
                     @foreach(var card in CREATURES)
                     {
                        <li class="text-small row">
                            <div class="col-2"> @card.Quantity </div>
                            <div class="col-5"> @card.data.Name </div>
                            <div class="col-2"> @card.data.Power / @card.data.Health </div>
                            <div class="col-3"> 
                                <div class="row">
                                @{
                                    string[] colorArray = card.data.Mana_Cost.Replace("}", "").Split("{");
                                    foreach(var color in colorArray)
                                    {
                                        switch(color)
                                        {
                                            case "W": <div class="mtg-mana-white"></div> break;
                                            case "R": <div class="mtg-mana-red"></div> break;
                                            case "B": <div class="mtg-mana-black"></div> break;
                                            case "G": <div class="mtg-mana-green"></div> break;
                                            case "U": <div class="mtg-mana-blue"></div> break;
                                            default: // numbers

                                                        int result= -1;

                                                        if(Int32.TryParse(color,out result))
                                                        {
                                                            <text>[@color] </text>
                                                        }
                                                break;
                                            }
                                        }
                                }
                                </div>
                            </div>
                        </li>
                     }
                </ul>
             </div>
        </div>
        <!-- INSTANTS -->
        <div class="accordion-item" style="color: black;">
            <a  style="color:black;" data-toggle="collapse" data-parent="#accordion-1" href="#accordion-panel-instant" aria-expanded="true" aria-controls="accordion-1">
                <i><img src="https://mtgmeta.io/assets/media/manasvg/instant.svg" alt="instant" title="instant"> </i> 
                <div>Instants [<b>@INSTANTS.Sum(x=>x.Quantity)x</b>]</div>
                <i class="h5 icon-chevron-small-right"></i>
            </a>
             <div id="accordion-panel-instant" class="collapse" role="tabpanel">
                 <ul class="list-unstyled">
                     @foreach(var card in INSTANTS)
                     {
                        <li class="text-small row">
                           <div class="col-2"> @card.Quantity </div>
                            <div class="col-5"> @card.data.Name </div>
                            <div class="col-2"> </div>
                            <div class="col-3"> 
                                <div class="row">
                                @{
                                    string[] colorArray = card.data.Mana_Cost.Replace("}", "").Split("{");
                                    foreach(var color in colorArray)
                                    {
                                        switch(color)
                                        {
                                            case "W": <div class="mtg-mana-white"></div> break;
                                            case "R": <div class="mtg-mana-red"></div> break;
                                            case "B": <div class="mtg-mana-black"></div> break;
                                            case "G": <div class="mtg-mana-green"></div> break;
                                            case "U": <div class="mtg-mana-blue"></div> break;
                                            default: // numbers

                                                        int result= -1;

                                                        if(Int32.TryParse(color,out result))
                                                        {
                                                            <text>[@color] </text>
                                                        }
                                                break;
                                            }
                                        }
                                }
                                </div>
                            </div>
                        </li>
                     }
                </ul>
             </div>
        </div>
        <!-- ENCHANTMENTS -->
        <div class="accordion-item" style="color: black;">
            <a  style="color:black;" data-toggle="collapse" data-parent="#accordion-1" href="#accordion-panel-enchantment" aria-expanded="true" aria-controls="accordion-1">
                <i><img src="https://mtgmeta.io/assets/media/manasvg/enchantment.svg" alt="enchantment" title="enchantment"> </i> 
                <div>Enchantments [<b>@ENCHANTMENTS.Sum(x=>x.Quantity)x</b>]</div>
                <i class="h5 icon-chevron-small-right"></i>
            </a>
             <div id="accordion-panel-enchantment" class="collapse" role="tabpanel">
                 <ul class="list-unstyled">
                     @foreach(var card in ENCHANTMENTS)
                     {
                        <li class="text-small row">
                            <div class="col-2"> @card.Quantity </div>
                            <div class="col-5"> @card.data.Name </div>
                            <div class="col-2"> </div>
                            <div class="col-3"> 
                                <div class="row">
                                @{
                                    string[] colorArray = card.data.Mana_Cost.Replace("}", "").Split("{");
                                    foreach(var color in colorArray)
                                    {
                                        switch(color)
                                        {
                                            case "W": <div class="mtg-mana-white"></div> break;
                                            case "R": <div class="mtg-mana-red"></div> break;
                                            case "B": <div class="mtg-mana-black"></div> break;
                                            case "G": <div class="mtg-mana-green"></div> break;
                                            case "U": <div class="mtg-mana-blue"></div> break;
                                            default: // numbers

                                                        int result= -1;

                                                        if(Int32.TryParse(color,out result))
                                                        {
                                                            <text>[@color] </text>
                                                        }
                                                break;
                                            }
                                        }
                                }
                                </div>
                            </div>
                        </li>
                     }
                </ul>
             </div>
        </div>
        <!-- SORCERIES -->
        <div class="accordion-item" style="color: black;">
            <a style="color:black;"  data-toggle="collapse" data-parent="#accordion-1" href="#accordion-panel-sorcery" aria-expanded="true" aria-controls="accordion-1">
                <i><img src="https://mtgmeta.io/assets/media/manasvg/sorcery.svg" alt="sorcery" title="sorcery"> </i> 
                <div>Sorceries [<b>@SORCERIES.Sum(x=>x.Quantity)x</b>]</div>
                <i class="h5 icon-chevron-small-right"></i>
            </a>
             <div id="accordion-panel-sorcery" class="collapse" role="tabpanel">
                 <ul class="list-unstyled">
                     @foreach(var card in SORCERIES)
                     {
                        <li class="text-small row">
                           <div class="col-2"> @card.Quantity </div>
                            <div class="col-5"> @card.data.Name </div>
                            <div class="col-2">   </div>
                            <div class="col-3"> 
                                <div class="row">
                                @{
                                    string[] colorArray = card.data.Mana_Cost.Replace("}", "").Split("{");
                                    foreach(var color in colorArray)
                                    {
                                        switch(color)
                                        {
                                            case "W": <div class="mtg-mana-white"></div> break;
                                            case "R": <div class="mtg-mana-red"></div> break;
                                            case "B": <div class="mtg-mana-black"></div> break;
                                            case "G": <div class="mtg-mana-green"></div> break;
                                            case "U": <div class="mtg-mana-blue"></div> break;
                                            default: // numbers

                                                        int result= -1;

                                                        if(Int32.TryParse(color,out result))
                                                        {
                                                            <text>[@color] </text>
                                                        }
                                                break;
                                            }
                                        }
                                }
                                </div>
                            </div>
                        </li>
                     }
                </ul>
             </div>
        </div>
        <!-- ARTIFACTS -->
        <div class="accordion-item" style="color: black;">
            <a  style="color:black;" data-toggle="collapse" data-parent="#accordion-1" href="#accordion-panel-artifact" aria-expanded="true" aria-controls="accordion-1">
                <i><img src="https://mtgmeta.io/assets/media/manasvg/artifact.svg" alt="artifact" title="artifact"> </i> 
                <div>Artifacts [<b>@ARTIFACTS.Sum(x=>x.Quantity)x</b>]</div>
                <i class="h5 icon-chevron-small-right"></i>
            </a>
             <div id="accordion-panel-artifact" class="collapse" role="tabpanel">
                 <ul class="list-unstyled">
                     @foreach(var card in ARTIFACTS)
                     {
                        <li class="text-small row">
                           <div class="col-2"> @card.Quantity </div>
                            <div class="col-5"> @card.data.Name </div>
                            <div class="col-2">   </div>
                            <div class="col-3"> 
                                <div class="row">
                                @{
                                    string[] colorArray = card.data.Mana_Cost.Replace("}", "").Split("{");
                                    foreach(var color in colorArray)
                                    {
                                        switch(color)
                                        {
                                            case "W": <div class="mtg-mana-white"></div> break;
                                            case "R": <div class="mtg-mana-red"></div> break;
                                            case "B": <div class="mtg-mana-black"></div> break;
                                            case "G": <div class="mtg-mana-green"></div> break;
                                            case "U": <div class="mtg-mana-blue"></div> break;
                                            default: // numbers

                                                        int result= -1;

                                                        if(Int32.TryParse(color,out result))
                                                        {
                                                            <text>[@color] </text>
                                                        }
                                                break;
                                            }
                                        }
                                }
                                </div>
                            </div>
                        </li>
                     }
                </ul>
             </div>
        </div>
        <!-- LANDS -->
        <div class="accordion-item" style="color: black;">
            <a style="color:black;"  data-toggle="collapse" data-parent="#accordion-1" href="#accordion-panel-land" aria-expanded="true" aria-controls="accordion-1">
                <i><img src="https://mtgmeta.io/assets/media/manasvg/land.svg" alt="lands" title="lands"> </i> 
                <div>Lands [<b>@LANDS.Sum(x=>x.Quantity)x</b>]</div>
                <i class="h5 icon-chevron-small-right"></i>
            </a>
             <div id="accordion-panel-land" class="collapse" role="tabpanel">
                 <ul class="list-unstyled">
                     @foreach(var card in LANDS)
                     {
                        <li class="text-small row">
                            <div class="col-2"> @card.Quantity </div>
                            <div> @card.data.Name </div>
                        </li>
                     }
                </ul>
             </div>
        </div>
    </div>


  

    <div class="row">
        <div class="col-6">
            <canvas class="card shadow" id="costDistribution"></canvas>
        </div>
        <div class="col-6">
            <canvas class="card shadow" id="typeDistribution"></canvas>
        </div>
    </div>
     <div class="row">
        <div class="col-6">
            <canvas class="card shadow" id="colorDistribution"></canvas>
        </div>
        <div class="col-6">
            <canvas class="card shadow" id="setDistribution"></canvas>
        </div>
    </div>
</div>

    <!-- typeDistribution chart -->
    <script>
        var typeDictionary =  @Html.Raw(Json.Serialize(Model.TypeDistribution));
            
        var ctx = document.getElementById("typeDistribution");

        var myChart = new Chart(ctx, {
            type: 'bar',
            data: 
            {
                labels: Object.keys(typeDictionary) ,
                datasets: [ { 
                    label: 'Type distribution',
                    data: Object.values(typeDictionary),
                    backgroundColor :
                    [ 
                        "rgba(239, 143, 68, 0.3)",
                        "rgba(181, 243, 54, 0.3)",
                        "rgba(250, 240, 12, 0.3)",
                        "rgba(53, 146, 131, 0.3)",
                        "rgba(159, 32, 246, 0.3)",
                        "rgba(42, 138, 53, 0.3)",
                        "rgba(248, 180, 10, 0.3)",
                        "rgba(168, 70, 126, 0.3)",
                        "rgba(202, 84, 230, 0.3)",
                        "rgba(128, 118, 89, 0.3)",
                        "rgba(250, 100, 53, 0.3)",
                        "rgba(115, 228, 101, 0.3)",
                        "rgba(149, 244, 8, 0.3)",
                        "rgba(124, 107, 139, 0.3)",
                        "rgba(144, 68, 248, 0.3)",
                        "rgba(254, 141, 59, 0.3)",
                        "rgba(160, 58, 1, 0.3)",
                        "rgba(166, 153, 235, 0.3)",
                        "rgba(27, 213, 218, 0.3)",
                        "rgba(55, 157, 43, 0.3)"
                    ],
                    borderColor: 
                    [
                        
                        "rgba(239, 143, 68, 1)",
                        "rgba(181, 243, 54, 1)",
                        "rgba(250, 240, 12, 1)",
                        "rgba(53, 146, 131, 1)",
                        "rgba(159, 32, 246, 1)",
                        "rgba(42, 138, 53, 1)",
                        "rgba(248, 180, 10, 1)",
                        "rgba(168, 70, 126, 1)",
                        "rgba(202, 84, 230, 1)",
                        "rgba(128, 118, 89, 1)",
                        "rgba(250, 100, 53, 1)",
                        "rgba(115, 228, 101, 1)",
                        "rgba(149, 244, 8, 1)",
                        "rgba(124, 107, 139, 1)",
                        "rgba(144, 68, 248, 1)",
                        "rgba(254, 141, 59, 1)",
                        "rgba(160, 58, 1, 1)",
                        "rgba(166, 153, 235, 1)",
                        "rgba(27, 213, 218, 1)",
                        "rgba(55, 157, 43, 1)"
                    ],
                    borderWidth : 2
                    } ]
            },
             options: {
                scales: {
                    x: {
                        display: false
                    }
                }
            }
        });
    </script>

    <!-- costDistribution chart -->
    <script>
        var arraydata =  @Html.Raw(Json.Serialize(Model.ManaCurve));
        var trimmeDataArray = TrimZerosFromArray(arraydata);

            
        var ctx = document.getElementById("costDistribution");

        var myChart = new Chart(ctx, {
            type: 'bar',
            data: 
            {
                labels: [...Array(trimmeDataArray.length).keys()] ,
                datasets: [ { 
                    label: 'Cost distribution',
                    data: trimmeDataArray,
                    backgroundColor :
                    [ 
                        "rgba(250, 100, 53, 0.3)",
                        "rgba(115, 228, 101, 0.3)",
                        "rgba(149, 244, 8, 0.3)",
                        "rgba(124, 107, 139, 0.3)",
                        "rgba(144, 68, 248, 0.3)",
                        "rgba(254, 141, 59, 0.3)",
                        "rgba(160, 58, 1, 0.3)",
                        "rgba(166, 153, 235, 0.3)",
                        "rgba(27, 213, 218, 0.3)",
                        "rgba(239, 143, 68, 0.3)",
                        "rgba(181, 243, 54, 0.3)",
                        "rgba(250, 240, 12, 0.3)",
                        "rgba(53, 146, 131, 0.3)",
                        "rgba(159, 32, 246, 0.3)",
                        "rgba(42, 138, 53, 0.3)",
                        "rgba(248, 180, 10, 0.3)",
                        "rgba(168, 70, 126, 0.3)",
                        "rgba(202, 84, 230, 0.3)",
                        "rgba(128, 118, 89, 0.3)",
                        "rgba(55, 157, 43, 0.3)"
                    ],
                    borderColor: 
                    [
                        
                        "rgba(250, 100, 53, 1)",
                        "rgba(115, 228, 101, 1)",
                        "rgba(149, 244, 8, 1)",
                        "rgba(124, 107, 139, 1)",
                        "rgba(144, 68, 248, 1)",
                        "rgba(254, 141, 59, 1)",
                        "rgba(160, 58, 1, 1)",
                        "rgba(166, 153, 235, 1)",
                        "rgba(27, 213, 218, 1)",
                        "rgba(239, 143, 68, 1)",
                        "rgba(181, 243, 54, 1)",
                        "rgba(250, 240, 12, 1)",
                        "rgba(53, 146, 131, 1)",
                        "rgba(159, 32, 246, 1)",
                        "rgba(42, 138, 53, 1)",
                        "rgba(248, 180, 10, 1)",
                        "rgba(168, 70, 126, 1)",
                        "rgba(202, 84, 230, 1)",
                        "rgba(128, 118, 89, 1)",
                        "rgba(55, 157, 43, 1)"
                    ],
                    borderWidth : 2
                    } ]
            },
             options: {
                scales: {
                    x: {
                        display: false
                    }
                }
            }
        });

        function TrimZerosFromArray(array) {
            var count = array.length;
            var lastIndex = 0;
            for(i = count-1; i>=0;i--)
            {
                if(array[i] == 0)
                {
                    lastIndex = i;
                }   
                else break;
            }
            return array.slice(0,lastIndex);
        }
    </script>

    <!-- setDistribution chart -->
    <script>
        var setDictionary =  @Html.Raw(Json.Serialize(Model.SetDistribution));
            
        var ctx = document.getElementById("setDistribution");

        var myChart = new Chart(ctx, {
            type: 'bar',
            data: 
            {
                labels: Object.keys(setDictionary) ,
                datasets: [ { 
                    label: 'Set distribution',
                    data: Object.values(typeDictionary),
                    backgroundColor :
                    [ 
                        "rgba(250, 100, 53, 0.3)",
                        "rgba(115, 228, 101, 0.3)",
                        "rgba(149, 244, 8, 0.3)",
                        "rgba(124, 107, 139, 0.3)",
                        "rgba(144, 68, 248, 0.3)",
                        "rgba(254, 141, 59, 0.3)",
                        "rgba(160, 58, 1, 0.3)",
                        "rgba(166, 153, 235, 0.3)",
                        "rgba(27, 213, 218, 0.3)",
                        "rgba(239, 143, 68, 0.3)",
                        "rgba(181, 243, 54, 0.3)",
                        "rgba(250, 240, 12, 0.3)",
                        "rgba(53, 146, 131, 0.3)",
                        "rgba(159, 32, 246, 0.3)",
                        "rgba(42, 138, 53, 0.3)",
                        "rgba(248, 180, 10, 0.3)",
                        "rgba(168, 70, 126, 0.3)",
                        "rgba(202, 84, 230, 0.3)",
                        "rgba(128, 118, 89, 0.3)",
                        "rgba(55, 157, 43, 0.3)"
                    ],
                    borderColor: 
                    [
                        
                        "rgba(250, 100, 53, 1)",
                        "rgba(115, 228, 101, 1)",
                        "rgba(149, 244, 8, 1)",
                        "rgba(124, 107, 139, 1)",
                        "rgba(144, 68, 248, 1)",
                        "rgba(254, 141, 59, 1)",
                        "rgba(160, 58, 1, 1)",
                        "rgba(166, 153, 235, 1)",
                        "rgba(27, 213, 218, 1)",
                        "rgba(239, 143, 68, 1)",
                        "rgba(181, 243, 54, 1)",
                        "rgba(250, 240, 12, 1)",
                        "rgba(53, 146, 131, 1)",
                        "rgba(159, 32, 246, 1)",
                        "rgba(42, 138, 53, 1)",
                        "rgba(248, 180, 10, 1)",
                        "rgba(168, 70, 126, 1)",
                        "rgba(202, 84, 230, 1)",
                        "rgba(128, 118, 89, 1)",
                        "rgba(55, 157, 43, 1)"
                    ],
                    borderWidth : 2
                    } ]
            }          
        });
    </script>

    <!-- colorDistribution chart -->
    <script>
        var arraydata =  @Html.Raw(Json.Serialize(Model.ColorDistribution));
            
        var ctx = document.getElementById("colorDistribution");

        var myChart = new Chart(ctx, {
            type: 'bar',
            data: 
            {
                labels: Object.keys(arraydata) ,
                datasets: [ { 
                    label: 'Color distribution',
                    data: Object.values(arraydata),
                    backgroundColor :
                    [ 
                        "rgba(144, 68, 248, 0.3)",      // B
                        "rgba(250, 100, 53, 0.3)",      // R
                        "rgba(0, 150, 250, 0.3)",       // U
                        "rgba(115, 228, 101, 0.3)",     // G
                        "rgba(250, 240, 12, 0.3)"       // W
                    ],
                    borderColor: 
                    [
                        "rgba(144, 68, 248, 1)",      // B
                        "rgba(250, 100, 53, 1)",      // R
                        "rgba(0, 150, 250, 1)",       // U
                        "rgba(115, 228, 101, 1)",     // G
                        "rgba(250, 240, 12, 1)"       // W
                    ],
                    borderWidth : 2
                    } ]
            }
        });

        function TrimZerosFromArray(array) {
            var count = array.length;
            var lastIndex = 0;
            for(i = count-1; i>=0;i--)
            {
                if(array[i] == 0)
                {
                    lastIndex = i;
                }   
                else break;
            }
            return array.slice(0,lastIndex);
        }
    </script>